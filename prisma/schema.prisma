generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  telegramChatId String?  @unique

  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]
  notifications NotificationPreference?
  tips          Tip[]     @relation("AuthorTips")

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id            String   @id @default(cuid())
  userId        String
  stripeCustomerId String @unique
  stripeSubId   String?  @unique
  status        String   @default("inactive")
  currentPeriodEnd DateTime?
  plan          String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sport {
  id    String @id @default(cuid())
  slug  String @unique
  name  String
  tips  Tip[]
}

model Tip {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  status    TipStatus @default(FREE) // FREE or VIP
  sportId   String
  sport     Sport    @relation(fields: [sportId], references: [id])
  authorId  String
  author    User     @relation("AuthorTips", fields: [authorId], references: [id])
  odds      Float
  stake     Float    // units
  market    String
  bookmaker String?
  eventDate DateTime
  result    TipResult @default(PENDING)
  publishedAt DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status, publishedAt])
}

model NotificationPreference {
  id       String @id @default(cuid())
  userId   String @unique
  email    Boolean @default(true)
  telegram Boolean @default(false)

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  VIP
  ADMIN
}

enum TipStatus {
  FREE
  VIP
}

enum TipResult {
  PENDING
  WON
  LOST
  VOID
}